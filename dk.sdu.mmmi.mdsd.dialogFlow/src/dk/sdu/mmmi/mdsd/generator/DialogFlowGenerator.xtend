/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.dialogFlow.DialogFlowSystem
import dk.sdu.mmmi.mdsd.dialogFlow.Entity
import dk.sdu.mmmi.mdsd.dialogFlow.Intent

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DialogFlowGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val baseSystem = resource.allContents.filter(DialogFlowSystem).next
		val baseSystemName = baseSystem.name

		var system = baseSystem
			
		val rootElementCreator = new RootElementCreator(baseSystemName)
		rootElementCreator.generateElements(baseSystem, fsa)
		
		while(system!==null) {
		
			val entityCreator = new EntityCreator(baseSystemName)
			for (e: system.declarations.filter(Entity))  {
				entityCreator.generateEntity(e, fsa)
			}
				
			val intentCreator = new IntentCreator(baseSystemName)
			for (i: system.declarations.filter(Intent))  {
				intentCreator.generateIntent(i, fsa)
			}
			
			if(system.superSystem!== null) {system = system.superSystem.extendedSystem}
			else {system = null}
		}
	}
}
